import os
import asyncio
import json
import logging
import sys
import zipfile
import shutil
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events
from telethon.events import ChatAction
from dotenv import load_dotenv
from game_results_manager import GameResultsManager
from yaml_manager import YAMLDataManager
from aiohttp import web
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()

# --- CONFIGURATION ---
try:
    API_ID = int(os.getenv('API_ID') or '0')
    API_HASH = os.getenv('API_HASH') or ''
    BOT_TOKEN = os.getenv('BOT_TOKEN') or ''
    ADMIN_ID = int(os.getenv('ADMIN_ID') or '0')
    PORT = int(os.getenv('PORT') or '10000')

    # Validation des variables requises
    if not API_ID or API_ID == 0:
        raise ValueError("API_ID manquant ou invalide")
    if not API_HASH:
        raise ValueError("API_HASH manquant")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN manquant")

    logger.info(f"‚úÖ Configuration charg√©e: API_ID={API_ID}, ADMIN_ID={ADMIN_ID}, PORT={PORT}")
except Exception as e:
    logger.error(f"‚ùå Erreur configuration: {e}")
    logger.error("V√©rifiez vos variables d'environnement dans le fichier .env")
    exit(1)

# Fichier de configuration
CONFIG_FILE = 'bot_config.json'

# Variables globales
detected_stat_channel = None
confirmation_pending = {}
transfer_enabled = True

# Gestionnaires
yaml_manager = YAMLDataManager()
results_manager = GameResultsManager()

# Client Telegram
import time
session_name = f'bot_session_{int(time.time())}'
client = TelegramClient(session_name, API_ID, API_HASH)


def load_config():
    """Charge la configuration depuis le fichier JSON"""
    global detected_stat_channel
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                detected_stat_channel = config.get('stat_channel')
                logger.info(f"‚úÖ Configuration charg√©e: Canal={detected_stat_channel}")
        else:
            logger.info("‚ÑπÔ∏è Aucune configuration trouv√©e")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur chargement configuration: {e}")


def save_config():
    """Sauvegarde la configuration dans le fichier JSON"""
    try:
        config = {
            'stat_channel': detected_stat_channel
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)

        if yaml_manager:
            yaml_manager.set_config('stat_channel', detected_stat_channel)

        logger.info(f"üíæ Configuration sauvegard√©e: Canal={detected_stat_channel}")
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde configuration: {e}")


async def start_bot():
    """D√©marre le bot"""
    try:
        logger.info("üöÄ D√âMARRAGE DU BOT...")
        load_config()
        await client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ Bot Telegram connect√©")

        me = await client.get_me()
        username = getattr(me, 'username', 'Unknown') or f"ID:{getattr(me, 'id', 'Unknown')}"
        logger.info(f"‚úÖ Bot op√©rationnel: @{username}")

        if detected_stat_channel:
            logger.info(f"üìä Surveillance du canal: {detected_stat_channel}")
        else:
            logger.info("‚ö†Ô∏è Aucun canal configur√©. Ajoutez le bot √† un canal pour commencer.")

    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage: {e}")
        return False

    return True


# --- GESTION DES INVITATIONS ---
@client.on(events.ChatAction())
async def handler_join(event):
    """G√®re l'ajout du bot √† un canal"""
    global confirmation_pending

    try:
        if event.user_joined or event.user_added:
            me = await client.get_me()
            me_id = getattr(me, 'id', None)

            if event.user_id == me_id:
                channel_id = event.chat_id

                if str(channel_id).startswith('-207') and len(str(channel_id)) == 14:
                    channel_id = int('-100' + str(channel_id)[4:])

                if channel_id in confirmation_pending:
                    return

                confirmation_pending[channel_id] = 'waiting_confirmation'

                try:
                    chat = await client.get_entity(channel_id)
                    chat_title = getattr(chat, 'title', f'Canal {channel_id}')
                except:
                    chat_title = f'Canal {channel_id}'

                invitation_msg = f"""üîî **Nouveau canal d√©tect√©**

üìã **Canal** : {chat_title}
üÜî **ID** : {channel_id}

Pour surveiller ce canal et stocker les r√©sultats:
‚Ä¢ `/set_channel {channel_id}`

Le bot stockera automatiquement les parties o√π le premier groupe de parenth√®ses contient exactement 3 cartes diff√©rentes."""

                try:
                    await client.send_message(ADMIN_ID, invitation_msg)
                    logger.info(f"‚úâÔ∏è Invitation envoy√©e pour: {chat_title} ({channel_id})")
                except Exception as e:
                    logger.error(f"‚ùå Erreur envoi invitation: {e}")

    except Exception as e:
        logger.error(f"‚ùå Erreur dans handler_join: {e}")


@client.on(events.NewMessage(pattern=r'/set_channel (-?\d+)'))
async def set_channel(event):
    """Configure le canal √† surveiller"""
    global detected_stat_channel, confirmation_pending

    try:
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        match = event.pattern_match
        channel_id = int(match.group(1))

        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_stat_channel = channel_id
        confirmation_pending[channel_id] = 'configured'
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"""‚úÖ **Canal configur√© avec succ√®s**
üìã {chat_title}

Le bot va maintenant:
‚Ä¢ Surveiller les messages de ce canal
‚Ä¢ Stocker les parties avec 3 cartes dans le premier groupe
‚Ä¢ Identifier le gagnant (Joueur ou Banquier)
‚Ä¢ Ignorer les matchs nuls et les cas o√π les deux groupes ont 3 cartes

Utilisez /fichier pour exporter les r√©sultats.""")

        logger.info(f"‚úÖ Canal configur√©: {channel_id}")

    except Exception as e:
        logger.error(f"‚ùå Erreur set_channel: {e}")


transferred_messages = {}


@client.on(events.NewMessage())
async def handle_message(event):
    """Traite les messages entrants"""
    try:
        me = await client.get_me()
        if event.sender_id == me.id:
            return

        if not event.is_group and not event.is_channel:
            if event.sender_id in confirmation_pending:
                pending_action = confirmation_pending.get(event.sender_id)
                if isinstance(pending_action, dict) and pending_action.get('action') == 'reset_database':
                    message_text = event.message.message.strip().upper()
                    if message_text == 'OUI':
                        await event.respond("üîÑ **Remise √† z√©ro en cours...**")

                        results_manager._save_yaml([])
                        logger.info("‚úÖ Base de donn√©es remise √† z√©ro manuellement")

                        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                        new_file_path = f"resultats_{timestamp}.xlsx"
                        empty_file = results_manager.export_to_txt(file_path=new_file_path)

                        if empty_file and os.path.exists(empty_file):
                            await client.send_file(
                                event.sender_id,
                                empty_file,
                                caption="üìÑ **Nouveau fichier Excel cr√©√©**\n\nLe fichier est vide et pr√™t pour de nouvelles donn√©es."
                            )

                        await event.respond("‚úÖ **Remise √† z√©ro effectu√©e**\n\nLa base de donn√©es a √©t√© r√©initialis√©e avec succ√®s!")
                        del confirmation_pending[event.sender_id]
                        return
                    else:
                        await event.respond("‚ùå **Remise √† z√©ro annul√©e**\n\nVeuillez r√©pondre 'OUI' pour confirmer la remise √† z√©ro.")
                        del confirmation_pending[event.sender_id]
                        return

        if detected_stat_channel and event.chat_id == detected_stat_channel:
            message_text = event.message.message
            logger.info(f"üì® Message du canal: {message_text[:100]}...")

            if transfer_enabled:
                try:
                    transfer_msg = f"üì® **Message du canal:**\n\n{message_text}"
                    sent_msg = await client.send_message(ADMIN_ID, transfer_msg)
                    transferred_messages[event.message.id] = sent_msg.id
                except Exception as e:
                    logger.error(f"‚ùå Erreur transfert message: {e}")

            success, info = results_manager.process_message(message_text)

            if success:
                logger.info(f"‚úÖ {info}")
                try:
                    stats = results_manager.get_stats()
                    notification = f"""‚úÖ **Partie enregistr√©e!**

{info}

üìä **Statistiques actuelles:**
‚Ä¢ Total: {stats['total']} parties
‚Ä¢ Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)"""
                    await client.send_message(ADMIN_ID, notification)
                except Exception as e:
                    logger.error(f"Erreur notification: {e}")
            else:
                logger.info(f"‚ö†Ô∏è Message ignor√©: {info}")

    except Exception as e:
        logger.error(f"‚ùå Erreur traitement message: {e}")
        import traceback
        logger.error(traceback.format_exc())


@client.on(events.MessageEdited())
async def handle_edited_message(event):
    """Traite les messages √©dit√©s"""
    try:
        if detected_stat_channel and event.chat_id == detected_stat_channel:
            message_text = event.message.message
            logger.info(f"‚úèÔ∏è Message √©dit√© dans le canal: {message_text[:100]}...")

            if transfer_enabled:
                if event.message.id in transferred_messages:
                    admin_msg_id = transferred_messages[event.message.id]
                    try:
                        transfer_msg = f"üì® **Message du canal (‚úèÔ∏è √âDIT√â):**\n\n{message_text}"
                        await client.edit_message(ADMIN_ID, admin_msg_id, transfer_msg)
                        logger.info(f"‚úÖ Message transf√©r√© √©dit√©")
                    except Exception as e:
                        logger.error(f"‚ùå Erreur √©dition message transf√©r√©: {e}")
                else:
                    try:
                        transfer_msg = f"üì® **Message du canal (‚úèÔ∏è √âDIT√â - nouveau):**\n\n{message_text}"
                        sent_msg = await client.send_message(ADMIN_ID, transfer_msg)
                        transferred_messages[event.message.id] = sent_msg.id
                    except Exception as e:
                        logger.error(f"‚ùå Erreur transfert message √©dit√©: {e}")

            success, info = results_manager.process_message(message_text)

            if success:
                logger.info(f"‚úÖ {info}")
                try:
                    stats = results_manager.get_stats()
                    notification = f"""‚úÖ **Partie enregistr√©e (message finalis√©)!**

{info}

üìä **Statistiques actuelles:**
‚Ä¢ Total: {stats['total']} parties
‚Ä¢ Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)"""
                    await client.send_message(ADMIN_ID, notification)
                except Exception as e:
                    logger.error(f"Erreur notification: {e}")
            else:
                if "en cours d'√©dition" not in info:
                    logger.info(f"‚ö†Ô∏è Message √©dit√© ignor√©: {info}")

    except Exception as e:
        logger.error(f"‚ùå Erreur traitement message √©dit√©: {e}")
        import traceback
        logger.error(traceback.format_exc())


@client.on(events.NewMessage(pattern='/start'))
async def cmd_start(event):
    """Commande /start"""
    if event.is_group or event.is_channel:
        return

    await event.respond("""üëã **Bot de Stockage de R√©sultats de Jeux**

Ce bot stocke automatiquement les r√©sultats des parties o√π le premier groupe de parenth√®ses contient exactement 3 cartes diff√©rentes.

**Commandes disponibles:**
‚Ä¢ `/status` - Voir l'√©tat du bot et les statistiques
‚Ä¢ `/fichier` - Exporter les r√©sultats en fichier Excel
‚Ä¢ `/help` - Aide d√©taill√©e

**Configuration:**
1. Ajoutez le bot √† votre canal
2. Utilisez `/set_channel` pour configurer
3. Le bot enregistrera automatiquement les r√©sultats

D√©velopp√© pour stocker les victoires Joueur/Banquier.""")


@client.on(events.NewMessage(pattern='/status'))
async def cmd_status(event):
    """Affiche le statut du bot"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        stats = results_manager.get_stats()

        status_msg = f"""üìä **STATUT DU BOT**

**Configuration:**
‚Ä¢ Canal surveill√©: {f'‚úÖ Configur√© (ID: {detected_stat_channel})' if detected_stat_channel else '‚ùå Non configur√©'}
‚Ä¢ Transfert des messages: {'üîî Activ√©' if transfer_enabled else 'üîï D√©sactiv√©'}

**Statistiques:**
‚Ä¢ Total de parties: {stats['total']}
‚Ä¢ Victoires Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Victoires Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)

**Crit√®res de stockage:**
‚úÖ Exactement 3 cartes dans le premier groupe
‚úÖ Gagnant identifiable (Joueur ou Banquier)
‚ùå Ignore les matchs nuls
‚ùå Ignore si les deux groupes ont 3 cartes

Utilisez /fichier pour exporter les r√©sultats."""

        await event.respond(status_msg)

    except Exception as e:
        logger.error(f"‚ùå Erreur status: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/fichier'))
async def cmd_fichier(event):
    """Exporte les r√©sultats en fichier Excel"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        await event.respond("üìä G√©n√©ration du fichier Excel en cours...")
        file_path = results_manager.export_to_txt()

        if file_path and os.path.exists(file_path):
            await client.send_file(
                event.chat_id,
                file_path,
                caption="üìä **Export des r√©sultats**\n\nFichier Excel g√©n√©r√© avec succ√®s!"
            )
            logger.info("‚úÖ Fichier Excel export√© et envoy√©")
        else:
            await event.respond("‚ùå Erreur lors de la g√©n√©ration du fichier Excel")

    except Exception as e:
        logger.error(f"‚ùå Erreur export fichier: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/deploy'))
async def cmd_deploy(event):
    """Cr√©e un package de d√©ploiement pour Render.com"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        await event.respond("üì¶ Pr√©paration du package de d√©ploiement pour Render.com...")

        benin_tz = timezone(timedelta(hours=1))
        now_benin = datetime.now(benin_tz)
        timestamp = now_benin.strftime('%Y-%m-%d_%H-%M-%S')
        
        deploy_dir = Path(f"deploy_render_{timestamp}")
        deploy_dir.mkdir(exist_ok=True)

        files_to_copy = [
            'main.py',
            'game_results_manager.py',
            'yaml_manager.py'
        ]

        for file in files_to_copy:
            if os.path.exists(file):
                shutil.copy(file, deploy_dir / file)

        render_yaml = """services:
  - type: web
    name: bot-telegram-bcarte
    env: python
    region: frankfurt
    plan: starter
    buildCommand: pip install -r requirements.txt
    startCommand: python main.py
    envVars:
      - key: PORT
        value: 10000
      - key: API_ID
        sync: false
      - key: API_HASH
        sync: false
      - key: BOT_TOKEN
        sync: false
      - key: ADMIN_ID
        sync: false
"""

        with open(deploy_dir / 'render.yaml', 'w', encoding='utf-8') as f:
            f.write(render_yaml)

        requirements = """telethon==1.35.0
aiohttp==3.9.5
python-dotenv==1.0.1
pyyaml==6.0.1
openpyxl==3.1.2
"""

        with open(deploy_dir / 'requirements.txt', 'w', encoding='utf-8') as f:
            f.write(requirements)
        
        env_example = """# Variables d'environnement pour le bot Telegram
# Ne jamais committer ces valeurs r√©elles !

API_ID=votre_api_id
API_HASH=votre_api_hash
BOT_TOKEN=votre_bot_token
ADMIN_ID=votre_admin_id
PORT=10000
"""

        with open(deploy_dir / '.env.example', 'w', encoding='utf-8') as f:
            f.write(env_example)

        readme = f"""# Bot Telegram - Package de D√©ploiement Render.com

üìÖ **Cr√©√© le:** {now_benin.strftime('%d/%m/%Y √† %H:%M:%S')} (Heure B√©nin UTC+1)
üì¶ **Version:** {timestamp}

## üöÄ Instructions de d√©ploiement sur Render.com

### √âtape 1: Cr√©er un repository GitHub
1. Cr√©ez un nouveau repository sur GitHub
2. Uploadez tous les fichiers de ce package

### √âtape 2: D√©ployer sur Render.com
1. Connectez-vous √† [render.com](https://render.com)
2. Cliquez sur **"New +"** ‚Üí **"Web Service"**
3. Connectez votre repository GitHub
4. Render d√©tectera automatiquement `render.yaml`

### √âtape 3: Configurer les Variables d'Environnement
Dans la section **Environment** de Render.com, ajoutez:
- **PORT**: 10000 (d√©j√† configur√©)
- **API_ID**: Obtenez-le sur https://my.telegram.org
- **API_HASH**: Obtenez-le sur https://my.telegram.org
- **BOT_TOKEN**: Cr√©ez un bot avec @BotFather sur Telegram
- **ADMIN_ID**: Obtenez votre ID avec @userinfobot sur Telegram

### √âtape 4: D√©ployer
1. Cliquez sur **"Create Web Service"**
2. Attendez le d√©ploiement (2-3 minutes)
3. Le bot sera en ligne 24/7 !

## ‚úÖ Fonctionnalit√©s principales

- ‚úÖ **D√©tection automatique**: Reconna√Æt les parties avec 3 cartes diff√©rentes
- ‚úÖ **Export quotidien**: G√©n√®re un fichier Excel √† 00h59 (UTC+1)
- ‚úÖ **R√©initialisation auto**: Reset automatique √† 01h00
- ‚úÖ **Statistiques en temps r√©el**: Taux de victoire Joueur/Banquier

## üìä Commandes disponibles

- `/start` - D√©marrer le bot et voir les informations
- `/status` - Voir les statistiques actuelles
- `/fichier` - Exporter les r√©sultats en Excel
- `/reset` - R√©initialiser la base de donn√©es manuellement
- `/deploy` - Cr√©er un nouveau package de d√©ploiement
- `/help` - Afficher l'aide compl√®te

## üéØ Crit√®res d'enregistrement

### ‚úÖ Parties enregistr√©es:
- Premier groupe: **exactement 3 cartes de couleurs diff√©rentes**
- Deuxi√®me groupe: **PAS 3 cartes**
- Gagnant identifiable: **Joueur** ou **Banquier**

### ‚ùå Parties ignor√©es:
- Match nul
- Les deux groupes ont 3 cartes
- Pas de num√©ro de jeu identifiable

## ‚öôÔ∏è Configuration technique

- **Langage**: Python 3.11
- **Timezone**: Africa/Porto-Novo (UTC+1)
- **Port**: 10000 (Render.com)
- **Export automatique**: 00h59 chaque jour
- **Reset automatique**: 01h00 chaque jour

---
*Package g√©n√©r√© automatiquement*
*Derni√®re mise √† jour: {now_benin.strftime('%d/%m/%Y %H:%M:%S')}*
"""

        with open(deploy_dir / 'README_DEPLOIEMENT.md', 'w', encoding='utf-8') as f:
            f.write(readme)

        deploy_zip = "Kouam√©.zip"
        with zipfile.ZipFile(deploy_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(deploy_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, deploy_dir)
                    zipf.write(file_path, arcname)

        short_caption = f"""üì¶ **Package Render.com - Kouam√©**

üìÖ {now_benin.strftime('%d/%m/%Y %H:%M:%S')} (B√©nin)
üìÅ Kouam√©.zip
‚úÖ Port 10000 configur√©
‚úÖ Export √† 00h59
‚úÖ Reset √† 01h00"""

        await client.send_file(
            ADMIN_ID,
            deploy_zip,
            caption=short_caption
        )

        shutil.rmtree(deploy_dir)
        logger.info(f"‚úÖ Package cr√©√©: {deploy_zip}")

    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation package: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/stop_transfer'))
async def cmd_stop_transfer(event):
    """D√©sactive le transfert des messages du canal"""
    global transfer_enabled

    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Seul l'administrateur peut contr√¥ler le transfert")
        return

    transfer_enabled = False
    await event.respond("üîï **Transfert des messages d√©sactiv√©**\n\nLes messages du canal ne seront plus transf√©r√©s en priv√©.\n\nUtilisez /start_transfer pour r√©activer.")
    logger.info("üîï Transfert des messages d√©sactiv√©")


@client.on(events.NewMessage(pattern='/start_transfer'))
async def cmd_start_transfer(event):
    """Active le transfert des messages du canal"""
    global transfer_enabled

    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Seul l'administrateur peut contr√¥ler le transfert")
        return

    transfer_enabled = True
    await event.respond("üîî **Transfert des messages activ√©**\n\nLes messages du canal seront √† nouveau transf√©r√©s en priv√©.")
    logger.info("üîî Transfert des messages activ√©")


@client.on(events.NewMessage(pattern='/reset'))
async def cmd_reset(event):
    """Remet √† z√©ro la base de donn√©es manuellement"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        await event.respond("‚ö†Ô∏è **Confirmation requise**\n\n√ätes-vous s√ªr de vouloir remettre √† z√©ro la base de donn√©es?\n\nR√©pondez 'OUI' pour confirmer.")

        confirmation_pending[event.sender_id] = {
            'action': 'reset_database',
            'timestamp': datetime.now()
        }

        logger.info("‚ö†Ô∏è Confirmation de remise √† z√©ro en attente")

    except Exception as e:
        logger.error(f"‚ùå Erreur commande reset: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/help'))
async def cmd_help(event):
    """Affiche l'aide"""
    if event.is_group or event.is_channel:
        return

    help_msg = """üìñ **AIDE - Bot de Stockage de R√©sultats de Jeux**

**Fonctionnement:**
Le bot surveille un canal et stocke automatiquement les parties qui remplissent ces crit√®res:

‚úÖ **Crit√®res d'enregistrement:**
‚Ä¢ Le premier groupe de parenth√®ses contient exactement 3 cartes diff√©rentes
‚Ä¢ Le deuxi√®me groupe ne contient PAS 3 cartes
‚Ä¢ Un gagnant est clairement identifiable (Joueur ou Banquier)

‚ùå **Cas ignor√©s:**
‚Ä¢ Matchs nuls
‚Ä¢ Les deux groupes ont 3 cartes
‚Ä¢ Pas de num√©ro de jeu identifiable

**Commandes:**
‚Ä¢ `/start` - Message de bienvenue
‚Ä¢ `/status` - Voir les statistiques
‚Ä¢ `/fichier` - Exporter en fichier Excel manuellement
‚Ä¢ `/deploy` - Cr√©er un package pour d√©ployer sur Replit
‚Ä¢ `/reset` - Remettre √† z√©ro la base de donn√©es manuellement
‚Ä¢ `/stop_transfer` - D√©sactiver le transfert des messages du canal
‚Ä¢ `/start_transfer` - R√©activer le transfert des messages du canal
‚Ä¢ `/help` - Afficher cette aide

**Export automatique:**
‚Ä¢ Remise √† z√©ro automatique √† 1h00 du matin (heure B√©nin UTC+1) chaque jour

**Configuration:**
1. Ajoutez le bot √† votre canal Telegram
2. Utilisez la commande `/set_channel ID` en message priv√©
3. Le bot commencera √† surveiller automatiquement

**Format attendu des messages:**
Les messages doivent contenir:
‚Ä¢ Un num√©ro de jeu (#N123 ou similaire)
‚Ä¢ Deux groupes entre parenth√®ses: (cartes) - (cartes)
‚Ä¢ Une indication du gagnant (Joueur/Banquier)

**Support:**
Pour toute question, contactez l'administrateur."""

    await event.respond(help_msg)


async def index(request):
    """Page d'accueil du bot"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Bot Telegram - R√©sultats de Jeux</title>
        <meta charset="utf-8">
    </head>
    <body>
        <h1>ü§ñ Bot Telegram - Stockage de R√©sultats</h1>
        <p>Le bot est en ligne et fonctionne correctement.</p>
        <ul>
            <li><a href="/health">Health Check</a></li>
            <li><a href="/status">Statut et Statistiques (JSON)</a></li>
        </ul>
    </body>
    </html>
    """
    return web.Response(text=html, content_type='text/html', status=200)


async def health_check(request):
    """Endpoint de v√©rification de sant√©"""
    return web.Response(text="OK", status=200)


async def status_api(request):
    """Endpoint de statut"""
    stats = results_manager.get_stats()
    status_data = {
        "status": "running",
        "channel_configured": detected_stat_channel is not None,
        "channel_id": detected_stat_channel,
        "stats": stats,
        "timestamp": datetime.now().isoformat()
    }
    return web.json_response(status_data)


async def start_web_server():
    """D√©marre le serveur web en arri√®re-plan"""
    app = web.Application()
    app.router.add_get('/', index)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', status_api)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"‚úÖ Serveur web d√©marr√© sur le port {PORT}")


auto_export_task = None


async def daily_reset():
    """Remise √† z√©ro quotidienne √† 00h59 du matin (heure du B√©nin UTC+1)"""
    while True:
        try:
            benin_tz = timezone(timedelta(hours=1))
            now_benin = datetime.now(benin_tz)
            next_reset_benin = now_benin.replace(hour=0, minute=59, second=0, microsecond=0)

            if now_benin.hour >= 1 or (now_benin.hour == 0 and now_benin.minute >= 59):
                next_reset_benin += timedelta(days=1)

            wait_seconds = (next_reset_benin - now_benin).total_seconds()
            logger.info(f"‚è∞ Prochaine remise √† z√©ro dans {wait_seconds/3600:.1f} heures (√† 00h59 heure B√©nin)")

            await asyncio.sleep(wait_seconds)

            logger.info("üîÑ REMISE √Ä Z√âRO QUOTIDIENNE √Ä 00H59...")

            stats = results_manager.get_stats()

            if stats['total'] > 0:
                date_str = (now_benin - timedelta(days=1)).strftime('%d-%m-%Y')
                file_path = f"resultats_journee_{date_str}.xlsx"
                excel_file = results_manager.export_to_txt(file_path=file_path)

                if excel_file and os.path.exists(excel_file):
                    caption = f"""üìä **Rapport Journalier du {date_str}**

üìà R√©sultats de la journ√©e (01h00 √† 00h59):
‚Ä¢ Total: {stats['total']} parties
‚Ä¢ Victoires Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Victoires Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)

üîÑ La base de donn√©es va √™tre remise √† z√©ro pour une nouvelle journ√©e."""

                    await client.send_file(
                        ADMIN_ID,
                        excel_file,
                        caption=caption
                    )
                    logger.info(f"‚úÖ Rapport journalier envoy√© avec {stats['total']} parties")
            else:
                await client.send_message(
                    ADMIN_ID,
                    "üìä **Rapport Journalier**\n\nAucune partie enregistr√©e aujourd'hui (01h00 √† 00h59)."
                )
                logger.info("‚ÑπÔ∏è Aucune donn√©e √† exporter pour aujourd'hui")

            results_manager._save_yaml([])
            logger.info("‚úÖ Base de donn√©es remise √† z√©ro")

            await client.send_message(
                ADMIN_ID,
                "üîÑ **Remise √† z√©ro effectu√©e √† 00h59**\n\nLa base de donn√©es est maintenant vide et pr√™te pour une nouvelle journ√©e d'enregistrement."
            )

        except asyncio.CancelledError:
            logger.info("üõë T√¢che de remise √† z√©ro arr√™t√©e")
            break
        except Exception as e:
            logger.error(f"‚ùå Erreur remise √† z√©ro: {e}")
            await asyncio.sleep(3600)


async def main():
    """Fonction principale"""
    try:
        await start_web_server()

        success = await start_bot()
        if not success:
            logger.error("‚ùå √âchec du d√©marrage du bot")
            return

        logger.info("‚úÖ Bot compl√®tement op√©rationnel")
        logger.info("üìä En attente de messages...")

        asyncio.create_task(daily_reset())
        logger.info("‚úÖ T√¢che de remise √† z√©ro d√©marr√©e")

        await client.run_until_disconnected()

    except Exception as e:
        logger.error(f"‚ùå Erreur dans main: {e}")
    finally:
        await client.disconnect()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot arr√™t√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
