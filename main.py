import os
import asyncio
import json
import logging
import sys
import zipfile
import shutil
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events
from telethon.events import ChatAction
from dotenv import load_dotenv
from game_results_manager import GameResultsManager
from yaml_manager import YAMLDataManager
from aiohttp import web
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()

# --- CONFIGURATION ---
try:
    API_ID = int(os.getenv('API_ID') or '0')
    API_HASH = os.getenv('API_HASH') or ''
    BOT_TOKEN = os.getenv('BOT_TOKEN') or ''
    ADMIN_ID = int(os.getenv('ADMIN_ID') or '0')
    PORT = int(os.getenv('PORT') or '10000')

    # Validation des variables requises
    if not API_ID or API_ID == 0:
        raise ValueError("API_ID manquant ou invalide")
    if not API_HASH:
        raise ValueError("API_HASH manquant")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN manquant")

    logger.info(f"‚úÖ Configuration charg√©e: API_ID={API_ID}, ADMIN_ID={ADMIN_ID}, PORT={PORT}")
except Exception as e:
    logger.error(f"‚ùå Erreur configuration: {e}")
    logger.error("V√©rifiez vos variables d'environnement dans le fichier .env")
    exit(1)

# Fichier de configuration
CONFIG_FILE = 'bot_config.json'

# Variables globales
detected_stat_channel = None
confirmation_pending = {}
transfer_enabled = True  # Contr√¥le le transfert des messages

# Gestionnaires
yaml_manager = YAMLDataManager()
results_manager = GameResultsManager()

# Client Telegram
import time
session_name = f'bot_session_{int(time.time())}'
client = TelegramClient(session_name, API_ID, API_HASH)


def load_config():
    """Charge la configuration depuis le fichier JSON"""
    global detected_stat_channel
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                detected_stat_channel = config.get('stat_channel')
                logger.info(f"‚úÖ Configuration charg√©e: Canal={detected_stat_channel}")
        else:
            logger.info("‚ÑπÔ∏è Aucune configuration trouv√©e")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur chargement configuration: {e}")


def save_config():
    """Sauvegarde la configuration dans le fichier JSON"""
    try:
        config = {
            'stat_channel': detected_stat_channel
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)

        # Aussi sauvegarder dans YAML
        if yaml_manager:
            yaml_manager.set_config('stat_channel', detected_stat_channel)

        logger.info(f"üíæ Configuration sauvegard√©e: Canal={detected_stat_channel}")
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde configuration: {e}")


async def start_bot():
    """D√©marre le bot"""
    try:
        logger.info("üöÄ D√âMARRAGE DU BOT...")

        # Charger la configuration
        load_config()

        # D√©marrer le client Telegram
        await client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ Bot Telegram connect√©")

        # Obtenir les infos du bot
        me = await client.get_me()
        username = getattr(me, 'username', 'Unknown') or f"ID:{getattr(me, 'id', 'Unknown')}"
        logger.info(f"‚úÖ Bot op√©rationnel: @{username}")

        if detected_stat_channel:
            logger.info(f"üìä Surveillance du canal: {detected_stat_channel}")
        else:
            logger.info("‚ö†Ô∏è Aucun canal configur√©. Ajoutez le bot √† un canal pour commencer.")

    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage: {e}")
        return False

    return True


# --- GESTION DES INVITATIONS ---
@client.on(events.ChatAction())
async def handler_join(event):
    """G√®re l'ajout du bot √† un canal"""
    global confirmation_pending

    try:
        if event.user_joined or event.user_added:
            me = await client.get_me()
            me_id = getattr(me, 'id', None)

            if event.user_id == me_id:
                channel_id = event.chat_id

                # Normaliser l'ID si n√©cessaire
                if str(channel_id).startswith('-207') and len(str(channel_id)) == 14:
                    channel_id = int('-100' + str(channel_id)[4:])

                # √âviter les doublons
                if channel_id in confirmation_pending:
                    return

                confirmation_pending[channel_id] = 'waiting_confirmation'

                # Obtenir les infos du canal
                try:
                    chat = await client.get_entity(channel_id)
                    chat_title = getattr(chat, 'title', f'Canal {channel_id}')
                except:
                    chat_title = f'Canal {channel_id}'

                # Envoyer l'invitation √† l'admin
                invitation_msg = f"""üîî **Nouveau canal d√©tect√©**

üìã **Canal** : {chat_title}
üÜî **ID** : {channel_id}

Pour surveiller ce canal et stocker les r√©sultats:
‚Ä¢ `/set_channel {channel_id}`

Le bot stockera automatiquement les parties o√π le premier groupe de parenth√®ses contient exactement 3 cartes diff√©rentes."""

                try:
                    await client.send_message(ADMIN_ID, invitation_msg)
                    logger.info(f"‚úâÔ∏è Invitation envoy√©e pour: {chat_title} ({channel_id})")
                except Exception as e:
                    logger.error(f"‚ùå Erreur envoi invitation: {e}")

    except Exception as e:
        logger.error(f"‚ùå Erreur dans handler_join: {e}")


@client.on(events.NewMessage(pattern=r'/set_channel (-?\d+)'))
async def set_channel(event):
    """Configure le canal √† surveiller"""
    global detected_stat_channel, confirmation_pending

    try:
        # Seulement en priv√© avec l'admin
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extraire l'ID du canal
        match = event.pattern_match
        channel_id = int(match.group(1))

        # V√©rifier si le canal est en attente
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_stat_channel = channel_id
        confirmation_pending[channel_id] = 'configured'

        # Sauvegarder
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"""‚úÖ **Canal configur√© avec succ√®s**
üìã {chat_title}

Le bot va maintenant:
‚Ä¢ Surveiller les messages de ce canal
‚Ä¢ Stocker les parties avec 3 cartes dans le premier groupe
‚Ä¢ Identifier le gagnant (Joueur ou Banquier)
‚Ä¢ Ignorer les matchs nuls et les cas o√π les deux groupes ont 3 cartes

Utilisez /fichier pour exporter les r√©sultats.""")

        logger.info(f"‚úÖ Canal configur√©: {channel_id}")

    except Exception as e:
        logger.error(f"‚ùå Erreur set_channel: {e}")


# Dictionnaire pour stocker les messages transf√©r√©s {canal_message_id: admin_message_id}
transferred_messages = {}

# --- TRAITEMENT DES MESSAGES ---
@client.on(events.NewMessage())
async def handle_message(event):
    """Traite les messages entrants"""
    try:
        # Ignorer les messages du bot lui-m√™me
        me = await client.get_me()
        if event.sender_id == me.id:
            return

        # G√©rer les confirmations en priv√©
        if not event.is_group and not event.is_channel:
            if event.sender_id in confirmation_pending:
                pending_action = confirmation_pending.get(event.sender_id)
                if isinstance(pending_action, dict) and pending_action.get('action') == 'reset_database':
                    message_text = event.message.message.strip().upper()
                    if message_text == 'OUI':
                        await event.respond("üîÑ **Remise √† z√©ro en cours...**")

                        # R√©initialiser la base de donn√©es
                        results_manager._save_yaml([])
                        logger.info("‚úÖ Base de donn√©es remise √† z√©ro manuellement")

                        # Cr√©er un nouveau fichier Excel vide
                        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                        new_file_path = f"resultats_{timestamp}.xlsx"
                        empty_file = results_manager.export_to_txt(file_path=new_file_path)

                        if empty_file and os.path.exists(empty_file):
                            await client.send_file(
                                event.sender_id,
                                empty_file,
                                caption="üìÑ **Nouveau fichier Excel cr√©√©**\n\nLe fichier est vide et pr√™t pour de nouvelles donn√©es."
                            )

                        await event.respond("‚úÖ **Remise √† z√©ro effectu√©e**\n\nLa base de donn√©es a √©t√© r√©initialis√©e avec succ√®s!")

                        # Retirer la confirmation en attente
                        del confirmation_pending[event.sender_id]
                        return
                    else:
                        await event.respond("‚ùå **Remise √† z√©ro annul√©e**\n\nVeuillez r√©pondre 'OUI' pour confirmer la remise √† z√©ro.")
                        del confirmation_pending[event.sender_id]
                        return

        # V√©rifier si c'est un message du canal surveill√©
        if detected_stat_channel and event.chat_id == detected_stat_channel:
            message_text = event.message.message

            # Log de tous les messages re√ßus
            logger.info(f"üì® Message du canal: {message_text[:100]}...")

            # TRANSFERT AUTOMATIQUE: Envoyer une copie du message √† l'admin (si activ√©)
            if transfer_enabled:
                try:
                    transfer_msg = f"üì® **Message du canal:**\n\n{message_text}"
                    sent_msg = await client.send_message(ADMIN_ID, transfer_msg)
                    # Stocker l'association entre le message du canal et celui envoy√©
                    transferred_messages[event.message.id] = sent_msg.id
                except Exception as e:
                    logger.error(f"‚ùå Erreur transfert message: {e}")

            # Traiter le message avec le gestionnaire de r√©sultats
            success, info = results_manager.process_message(message_text)

            if success:
                logger.info(f"‚úÖ {info}")
                # Notifier l'admin
                try:
                    await client.send_message(ADMIN_ID, f"‚úÖ Partie enregistr√©e!\n{info}")
                except:
                    pass
            else:
                # Log pour comprendre pourquoi les messages sont ignor√©s
                logger.info(f"‚ö†Ô∏è Message ignor√©: {info}")

    except Exception as e:
        logger.error(f"‚ùå Erreur traitement message: {e}")
        import traceback
        logger.error(traceback.format_exc())


@client.on(events.MessageEdited())
async def handle_edited_message(event):
    """Traite les messages √©dit√©s"""
    try:
        # V√©rifier si c'est un message du canal surveill√©
        if detected_stat_channel and event.chat_id == detected_stat_channel:
            message_text = event.message.message

            logger.info(f"‚úèÔ∏è Message √©dit√© dans le canal: {message_text[:100]}...")

            # Si on a transf√©r√© ce message, √©diter la copie (si le transfert est activ√©)
            if transfer_enabled:
                if event.message.id in transferred_messages:
                    admin_msg_id = transferred_messages[event.message.id]
                    try:
                        transfer_msg = f"üì® **Message du canal (‚úèÔ∏è √âDIT√â):**\n\n{message_text}"
                        await client.edit_message(ADMIN_ID, admin_msg_id, transfer_msg)
                        logger.info(f"‚úÖ Message transf√©r√© √©dit√©")
                    except Exception as e:
                        logger.error(f"‚ùå Erreur √©dition message transf√©r√©: {e}")
                else:
                    # Si le message n'√©tait pas dans notre cache, l'envoyer comme nouveau
                    try:
                        transfer_msg = f"üì® **Message du canal (‚úèÔ∏è √âDIT√â - nouveau):**\n\n{message_text}"
                        sent_msg = await client.send_message(ADMIN_ID, transfer_msg)
                        transferred_messages[event.message.id] = sent_msg.id
                    except Exception as e:
                        logger.error(f"‚ùå Erreur transfert message √©dit√©: {e}")

            # Retraiter le message avec le gestionnaire de r√©sultats
            success, info = results_manager.process_message(message_text)

            if success:
                logger.info(f"‚úÖ {info}")
                # Notifier l'admin de la partie enregistr√©e (message √©dit√© finalis√©)
                try:
                    stats = results_manager.get_stats()
                    notification = f"""‚úÖ **Partie enregistr√©e (message finalis√©)!**

{info}

üìä **Statistiques actuelles:**
‚Ä¢ Total: {stats['total']} parties
‚Ä¢ Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)"""
                    await client.send_message(ADMIN_ID, notification)
                except Exception as e:
                    logger.error(f"Erreur notification: {e}")
            else:
                # Ne pas notifier pour les messages en cours (‚è∞)
                if "en cours d'√©dition" not in info:
                    logger.info(f"‚ö†Ô∏è Message √©dit√© ignor√©: {info}")

    except Exception as e:
        logger.error(f"‚ùå Erreur traitement message √©dit√©: {e}")
        import traceback
        logger.error(traceback.format_exc())


# --- COMMANDES ---
@client.on(events.NewMessage(pattern='/start'))
async def cmd_start(event):
    """Commande /start"""
    if event.is_group or event.is_channel:
        return

    await event.respond("""üëã **Bot de Stockage de R√©sultats de Jeux**

Ce bot stocke automatiquement les r√©sultats des parties o√π le premier groupe de parenth√®ses contient exactement 3 cartes diff√©rentes.

**Commandes disponibles:**
‚Ä¢ `/status` - Voir l'√©tat du bot et les statistiques
‚Ä¢ `/fichier` - Exporter les r√©sultats en fichier TXT
‚Ä¢ `/help` - Aide d√©taill√©e

**Configuration:**
1. Ajoutez le bot √† votre canal
2. Utilisez `/set_channel` pour configurer
3. Le bot enregistrera automatiquement les r√©sultats

D√©velopp√© pour stocker les victoires Joueur/Banquier.""")


@client.on(events.NewMessage(pattern='/status'))
async def cmd_status(event):
    """Affiche le statut du bot"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        # Obtenir les statistiques
        stats = results_manager.get_stats()

        status_msg = f"""üìä **STATUT DU BOT**

**Configuration:**
‚Ä¢ Canal surveill√©: {f'‚úÖ Configur√© (ID: {detected_stat_channel})' if detected_stat_channel else '‚ùå Non configur√©'}
‚Ä¢ Transfert des messages: {'üîî Activ√©' if transfer_enabled else 'üîï D√©sactiv√©'}

**Statistiques:**
‚Ä¢ Total de parties: {stats['total']}
‚Ä¢ Victoires Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Victoires Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)

**Crit√®res de stockage:**
‚úÖ Exactement 3 cartes dans le premier groupe
‚úÖ Gagnant identifiable (Joueur ou Banquier)
‚ùå Ignore les matchs nuls
‚ùå Ignore si les deux groupes ont 3 cartes

Utilisez /fichier pour exporter les r√©sultats."""

        await event.respond(status_msg)

    except Exception as e:
        logger.error(f"‚ùå Erreur status: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/fichier'))
async def cmd_fichier(event):
    """Exporte les r√©sultats en fichier Excel"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        await event.respond("üìä G√©n√©ration du fichier Excel en cours...")

        # G√©n√©rer le fichier avec nom automatique (date + heure)
        file_path = results_manager.export_to_txt()

        if file_path and os.path.exists(file_path):
            # Envoyer le fichier
            await client.send_file(
                event.chat_id,
                file_path,
                caption="üìä **Export des r√©sultats**\n\nFichier Excel g√©n√©r√© avec succ√®s!"
            )
            logger.info("‚úÖ Fichier Excel export√© et envoy√©")
        else:
            await event.respond("‚ùå Erreur lors de la g√©n√©ration du fichier Excel")

    except Exception as e:
        logger.error(f"‚ùå Erreur export fichier: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/deploy'))
async def cmd_deploy(event):
    """Cr√©e un package de d√©ploiement pour Render.com"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        await event.respond("üì¶ Pr√©paration du package de d√©ploiement pour Replit...")

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        deploy_zip = f"deploy_replit_{timestamp}.zip"

        # Cr√©er le fichier .replit temporaire pour Replit
        replit_content = """language = "python3"
    run = "python main.py"

    [nix]
    channel = "stable-23_11"

    [env]
    API_ID = ""
    API_HASH = ""
    BOT_TOKEN = ""
    ADMIN_ID = ""
    PORT = "10000"
    TZ = "Africa/Porto-Novo"
    """

        with open('.replit', 'w', encoding='utf-8') as f:
            f.write(replit_content)
        logger.info("‚úÖ Fichier .replit cr√©√©")

        # Cr√©er le fichier requirements.txt
        requirements_content = """telethon==1.34.0
python-dotenv==1.0.0
aiohttp==3.9.1
PyYAML==6.0.1
openpyxl==3.1.2
"""

        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write(requirements_content)
        logger.info("‚úÖ Fichier requirements.txt cr√©√©")

        # Cr√©er le fichier README.md pour le d√©ploiement
        readme_content = """# Bot Telegram - R√©sultats de Jeux Bcarte

Bot Telegram qui enregistre automatiquement les r√©sultats des parties de jeu.

## D√©ploiement sur Replit

### Pr√©requis
- Compte Replit
- Identifiants Telegram (API_ID, API_HASH, BOT_TOKEN, ADMIN_ID)

### Instructions de d√©ploiement

1. **Cr√©er un nouveau Repl**
   - Allez sur replit.com
   - Cliquez sur "Create Repl" ‚Üí "Import from GitHub" (optionnel)
   - Ou cr√©ez un nouveau Repl Python

2. **Uploader les fichiers**
   - Uploadez tous les fichiers de ce package
   - V√©rifiez que .replit est pr√©sent

3. **Configurer les Secrets**
   - Cliquez sur l'ic√¥ne cadenas üîí (Secrets)
   - Ajoutez ces variables :
     - `API_ID` : Votre Telegram API ID (depuis https://my.telegram.org)
     - `API_HASH` : Votre Telegram API Hash
     - `BOT_TOKEN` : Token de votre bot (depuis @BotFather)
     - `ADMIN_ID` : Votre ID utilisateur Telegram (depuis @userinfobot)

4. **D√©ployer**
   - Ouvrez l'onglet "Deployments"
   - Cliquez sur "Deploy"
   - Choisissez le type de d√©ploiement :
     - **Reserved VM** : Pour un bot 24/7 avec co√ªt fixe
     - **Autoscale** : Pour √©conomiser quand le bot est inactif
   - Attendez la fin du d√©ploiement

## Fonctionnalit√©s automatiques

### Remise √† z√©ro quotidienne
- **Heure** : 1h00 du matin (heure b√©ninoise UTC+1)
- **Action** : La base de donn√©es est vid√©e automatiquement
- **Export** : Un nouveau fichier Excel vide est cr√©√©
- **Notification** : L'admin re√ßoit le nouveau fichier Excel

### Export automatique
- L'intervalle peut √™tre configur√© avec `/settime`
- Exemples : 
"""

        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(readme_content)
        logger.info("‚úÖ Fichier README.md cr√©√©")

        files_to_include = [
            'main.py',
            'game_results_manager.py',
            'yaml_manager.py',
            'requirements.txt',
            '.replit',
            'README.md',
            '.env.example'
        ]

        if os.path.exists('runtime.txt'):
            files_to_include.append('runtime.txt')

        with zipfile.ZipFile(deploy_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file in files_to_include:
                if os.path.exists(file):
                    zipf.write(file, file)
                    logger.info(f"‚úÖ Ajout√©: {file}")

            if os.path.exists('data'):
                for root, dirs, files in os.walk('data'):
                    for file in files:
                        if file.endswith('.yaml'):
                            file_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_path, '.')
                            zipf.write(file_path, arcname)
                            logger.info(f"‚úÖ Ajout√©: {arcname}")

        # Caption court pour le fichier
        short_caption = f"""üì¶ **Package Replit cr√©√©!**

‚úÖ Fichiers inclus
‚úÖ Configuration compl√®te
‚úÖ Port 10000 configur√©

Voir le message suivant pour les instructions."""

        # Instructions d√©taill√©es dans un message s√©par√©
        detailed_instructions = """**üìã Instructions de d√©ploiement:**

**1Ô∏è‚É£ Contenu du package:**
‚Ä¢ Fichiers Python (main.py, game_results_manager.py, yaml_manager.py)
‚Ä¢ Configuration Replit (.replit avec fuseau horaire UTC+1)
‚Ä¢ D√©pendances (requirements.txt)
‚Ä¢ Documentation (README.md)

**2Ô∏è‚É£ Fonctionnalit√©s:**
üïê Reset auto √† 1h00 (B√©nin UTC+1)
üìä Export auto Excel
üìç Port 10000
üè• Health check /health

**3Ô∏è‚É£ √âtapes:**
1. Uploadez les fichiers dans Replit
2. Secrets (üîí) :
   - API_ID (my.telegram.org)
   - API_HASH
   - BOT_TOKEN (@BotFather)
   - ADMIN_ID (@userinfobot)
3. Onglet Deployments ‚Üí Deploy
4. Choisir Reserved VM ou Autoscale

Le bot d√©marre automatiquement!"""

        # Envoyer le fichier avec caption court
        await client.send_file(
            ADMIN_ID,
            deploy_zip,
            caption=short_caption
        )
        
        # Envoyer les instructions d√©taill√©es
        await client.send_message(ADMIN_ID, detailed_instructions)

        logger.info(f"‚úÖ Package de d√©ploiement Replit cr√©√©: {deploy_zip}")

        # Nettoyer le fichier .replit temporaire
        if os.path.exists('.replit'):
            os.remove('.replit')
            logger.info("‚úÖ Fichier .replit temporaire supprim√©")

    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation package: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern=r'/settime (\d+)(m|h)'))
async def cmd_settime(event):
    """Configure l'intervalle d'envoi automatique du fichier"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        match = event.pattern_match
        value = int(match.group(1))
        unit = match.group(2)

        # Convertir en minutes
        if unit == 'h':
            interval_minutes = value * 60
        else:
            interval_minutes = value

        # V√©rifier les limites (5 min √† 24h)
        if interval_minutes < 5 or interval_minutes > 1440:
            await event.respond("‚ùå L'intervalle doit √™tre entre 5 minutes et 24 heures")
            return

        # Sauvegarder la configuration
        yaml_manager.set_config('auto_export_interval', interval_minutes)

        # Red√©marrer la t√¢che d'export automatique
        await restart_auto_export_task()

        await event.respond(f"‚úÖ Envoi automatique configur√©: toutes les {value}{unit}\n\n‚ö†Ô∏è Remise √† z√©ro quotidienne √† 1h00 du matin (heure B√©nin UTC+1)")
        logger.info(f"‚úÖ Intervalle d'export configur√©: {interval_minutes} minutes")

    except Exception as e:
        logger.error(f"‚ùå Erreur settime: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/stop_transfer'))
async def cmd_stop_transfer(event):
    """D√©sactive le transfert des messages du canal"""
    global transfer_enabled

    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Seul l'administrateur peut contr√¥ler le transfert")
        return

    transfer_enabled = False
    await event.respond("üîï **Transfert des messages d√©sactiv√©**\n\nLes messages du canal ne seront plus transf√©r√©s en priv√©.\n\nUtilisez /start_transfer pour r√©activer.")
    logger.info("üîï Transfert des messages d√©sactiv√©")


@client.on(events.NewMessage(pattern='/start_transfer'))
async def cmd_start_transfer(event):
    """Active le transfert des messages du canal"""
    global transfer_enabled

    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Seul l'administrateur peut contr√¥ler le transfert")
        return

    transfer_enabled = True
    await event.respond("üîî **Transfert des messages activ√©**\n\nLes messages du canal seront √† nouveau transf√©r√©s en priv√©.")
    logger.info("üîî Transfert des messages activ√©")


@client.on(events.NewMessage(pattern='/reset'))
async def cmd_reset(event):
    """Remet √† z√©ro la base de donn√©es manuellement"""
    if event.is_group or event.is_channel:
        return

    if event.sender_id != ADMIN_ID:
        await event.respond("‚ùå Commande r√©serv√©e √† l'administrateur")
        return

    try:
        await event.respond("‚ö†Ô∏è **Confirmation requise**\n\n√ätes-vous s√ªr de vouloir remettre √† z√©ro la base de donn√©es?\n\nR√©pondez 'OUI' pour confirmer.")

        confirmation_pending[event.sender_id] = {
            'action': 'reset_database',
            'timestamp': datetime.now()
        }

        logger.info("‚ö†Ô∏è Confirmation de remise √† z√©ro en attente")

    except Exception as e:
        logger.error(f"‚ùå Erreur commande reset: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/help'))
async def cmd_help(event):
    """Affiche l'aide"""
    if event.is_group or event.is_channel:
        return

    help_msg = """üìñ **AIDE - Bot de Stockage de R√©sultats**

**Fonctionnement:**
Le bot surveille un canal et stocke automatiquement les parties qui remplissent ces crit√®res:

‚úÖ **Crit√®res d'enregistrement:**
‚Ä¢ Le premier groupe de parenth√®ses contient exactement 3 cartes diff√©rentes
‚Ä¢ Le deuxi√®me groupe ne contient PAS 3 cartes
‚Ä¢ Un gagnant est clairement identifiable (Joueur ou Banquier)

‚ùå **Cas ignor√©s:**
‚Ä¢ Matchs nuls
‚Ä¢ Les deux groupes ont 3 cartes
‚Ä¢ Pas de num√©ro de jeu identifiable

**Commandes:**
‚Ä¢ `/start` - Message de bienvenue
‚Ä¢ `/status` - Voir les statistiques
‚Ä¢ `/fichier` - Exporter en fichier Excel manuellement
‚Ä¢ `/deploy` - Cr√©er un package pour d√©ployer sur Replit
‚Ä¢ `/settime 30m` ou `/settime 2h` - Configurer l'envoi automatique (5min-24h)
‚Ä¢ `/reset` - Remettre √† z√©ro la base de donn√©es manuellement
‚Ä¢ `/stop_transfer` - D√©sactiver le transfert des messages du canal
‚Ä¢ `/start_transfer` - R√©activer le transfert des messages du canal
‚Ä¢ `/help` - Afficher cette aide

**Export automatique:**
‚Ä¢ Le fichier Excel est envoy√© automatiquement √† l'intervalle d√©fini
‚Ä¢ Remise √† z√©ro automatique √† 1h00 du matin (heure B√©nin UTC+1) chaque jour
‚Ä¢ Exemples: `/settime 15m`, `/settime 1h`, `/settime 6h`

**Configuration:**
1. Ajoutez le bot √† votre canal Telegram
2. Utilisez la commande `/set_channel ID` en message priv√©
3. Le bot commencera √† surveiller automatiquement

**Format attendu des messages:**
Les messages doivent contenir:
‚Ä¢ Un num√©ro de jeu (#N123 ou similaire)
‚Ä¢ Deux groupes entre parenth√®ses: (cartes) - (cartes)
‚Ä¢ Une indication du gagnant (Joueur/Banquier)

**Support:**
Pour toute question, contactez l'administrateur."""

    await event.respond(help_msg)


# --- SERVEUR WEB (HEALTH CHECK) ---
async def index(request):
    """Page d'accueil du bot"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Bot Telegram - R√©sultats de Jeux</title>
        <meta charset="utf-8">
    </head>
    <body>
        <h1>ü§ñ Bot Telegram - Stockage de R√©sultats</h1>
        <p>Le bot est en ligne et fonctionne correctement.</p>
        <ul>
            <li><a href="/health">Health Check</a></li>
            <li><a href="/status">Statut et Statistiques (JSON)</a></li>
        </ul>
    </body>
    </html>
    """
    return web.Response(text=html, content_type='text/html', status=200)


async def health_check(request):
    """Endpoint de v√©rification de sant√©"""
    return web.Response(text="OK", status=200)


async def status_api(request):
    """Endpoint de statut"""
    stats = results_manager.get_stats()
    status_data = {
        "status": "running",
        "channel_configured": detected_stat_channel is not None,
        "channel_id": detected_stat_channel,
        "stats": stats,
        "timestamp": datetime.now().isoformat()
    }
    return web.json_response(status_data)


async def start_web_server():
    """D√©marre le serveur web en arri√®re-plan"""
    app = web.Application()
    app.router.add_get('/', index)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', status_api)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"‚úÖ Serveur web d√©marr√© sur le port {PORT}")


# Variables pour les t√¢ches automatiques
auto_export_task = None


async def auto_export_file():
    """Envoie automatiquement le fichier Excel √† l'intervalle configur√©"""
    while True:
        try:
            # R√©cup√©rer l'intervalle configur√© (en minutes)
            interval_minutes = yaml_manager.get_config('auto_export_interval', 60)

            # Attendre l'intervalle
            await asyncio.sleep(interval_minutes * 60)

            # G√©n√©rer et envoyer le fichier Excel avec nom automatique (date + heure)
            logger.info("üì§ Export automatique du fichier Excel...")
            file_path = results_manager.export_to_txt()

            if file_path and os.path.exists(file_path):
                stats = results_manager.get_stats()
                caption = f"""üìÑ **Export Automatique**

üìä Statistiques:
‚Ä¢ Total: {stats['total']} parties
‚Ä¢ Joueur: {stats['joueur_victoires']} ({stats['taux_joueur']:.1f}%)
‚Ä¢ Banquier: {stats['banquier_victoires']} ({stats['taux_banquier']:.1f}%)

‚è±Ô∏è Prochain envoi dans {interval_minutes} minutes"""

                await client.send_file(
                    ADMIN_ID,
                    file_path,
                    caption=caption
                )
                logger.info("‚úÖ Fichier Excel export√© automatiquement")

        except asyncio.CancelledError:
            logger.info("üõë T√¢che d'export automatique arr√™t√©e")
            break
        except Exception as e:
            logger.error(f"‚ùå Erreur export automatique: {e}")
            await asyncio.sleep(60)  # Attendre 1 minute avant de r√©essayer


async def daily_reset():
    """Remise √† z√©ro quotidienne √† 1h00 du matin (heure du B√©nin UTC+1)"""
    while True:
        try:
            # Cr√©er le fuseau horaire du B√©nin (UTC+1)
            benin_tz = timezone(timedelta(hours=1))

            # Obtenir l'heure actuelle au B√©nin
            now_benin = datetime.now(benin_tz)

            # Calculer 1h00 du matin (B√©nin)
            tomorrow_1am_benin = now_benin.replace(hour=1, minute=0, second=0, microsecond=0)

            # Si on a d√©pass√© 1h00 aujourd'hui, viser demain
            if now_benin.hour >= 1:
                tomorrow_1am_benin += timedelta(days=1)

            wait_seconds = (tomorrow_1am_benin - now_benin).total_seconds()
            logger.info(f"‚è∞ Prochaine remise √† z√©ro dans {wait_seconds/3600:.1f} heures (√† 1h00 heure B√©nin)")

            # Attendre jusqu'√† 1h00
            await asyncio.sleep(wait_seconds)

            # Effectuer la remise √† z√©ro
            logger.info("üîÑ REMISE √Ä Z√âRO QUOTIDIENNE √Ä 1H00...")

            # R√©initialiser les donn√©es
            results_manager._save_yaml([])
            logger.info("‚úÖ Base de donn√©es remise √† z√©ro")

            # Cr√©er un nouveau fichier Excel vide pour la nouvelle journ√©e
            timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
            new_file_path = f"resultats_{timestamp}.xlsx"
            empty_file = results_manager.export_to_txt(file_path=new_file_path)

            if empty_file and os.path.exists(empty_file):
                await client.send_file(
                    ADMIN_ID,
                    empty_file,
                    caption="üìÑ **Nouveau fichier Excel cr√©√© √† 1h00**\n\nLe fichier est vide et pr√™t pour une nouvelle journ√©e."
                )

            await client.send_message(ADMIN_ID, "üîÑ **Remise √† z√©ro automatique effectu√©e √† 1h00**\n\nLa base de donn√©es a √©t√© r√©initialis√©e pour une nouvelle journ√©e.")

        except asyncio.CancelledError:
            logger.info("üõë T√¢che de remise √† z√©ro arr√™t√©e")
            break
        except Exception as e:
            logger.error(f"‚ùå Erreur remise √† z√©ro: {e}")
            await asyncio.sleep(3600)  # Attendre 1 heure avant de r√©essayer


async def restart_auto_export_task():
    """Red√©marre la t√¢che d'export automatique"""
    global auto_export_task

    # Annuler la t√¢che existante
    if auto_export_task and not auto_export_task.done():
        auto_export_task.cancel()
        try:
            await auto_export_task
        except asyncio.CancelledError:
            pass

    # Cr√©er une nouvelle t√¢che
    auto_export_task = asyncio.create_task(auto_export_file())


# --- MAIN ---
async def main():
    """Fonction principale"""
    try:
        # D√©marrer le serveur web
        await start_web_server()

        # D√©marrer le bot
        success = await start_bot()
        if not success:
            logger.error("‚ùå √âchec du d√©marrage du bot")
            return

        logger.info("‚úÖ Bot compl√®tement op√©rationnel")
        logger.info("üìä En attente de messages...")

        # D√©marrer les t√¢ches automatiques
        asyncio.create_task(auto_export_file())
        asyncio.create_task(daily_reset())
        logger.info("‚úÖ T√¢ches automatiques d√©marr√©es (export + remise √† z√©ro)")

        # Garder le bot actif
        await client.run_until_disconnected()

    except Exception as e:
        logger.error(f"‚ùå Erreur dans main: {e}")
    finally:
        await client.disconnect()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot arr√™t√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")